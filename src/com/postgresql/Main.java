/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.postgresql;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bipin
 */
public final class Main extends javax.swing.JFrame {
    
    DbConnection dbConnection = new DbConnection();
    Map<Integer,Integer> cartItems = new HashMap<>();
    int itemCount=0;
    float grandTotal;
    ArrayList<CartList> cartList = new ArrayList<>();               

    /**
     * Creates new form frameDemo
     */
    public Main() {
        initComponents();
        show_product();            
        show_bill();
    }   
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Product_Panel = new javax.swing.JPanel();
        Table_ScrollPane = new javax.swing.JScrollPane();
        Product_Table = new javax.swing.JTable();
        Menu_Panel = new javax.swing.JPanel();
        AddToCart_Panel = new javax.swing.JPanel();
        productName_lbl = new javax.swing.JLabel();
        prodname_txt = new javax.swing.JTextField();
        quantity_txt = new javax.swing.JTextField();
        quantity_lbl = new javax.swing.JLabel();
        addtocart_btn = new javax.swing.JButton();
        prodid_txt = new javax.swing.JTextField();
        totalitems_lbl = new javax.swing.JLabel();
        totalitems_txt = new javax.swing.JTextField();
        Update_Panel = new javax.swing.JPanel();
        product_name_lbl = new javax.swing.JLabel();
        product_name_txt = new javax.swing.JTextField();
        product_id_txt = new javax.swing.JTextField();
        new_stock_lbl = new javax.swing.JLabel();
        new_stock_txt = new javax.swing.JTextField();
        update_stock_btn = new javax.swing.JButton();
        Cart_Panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Cart_Table = new javax.swing.JTable();
        grandtotal_lbl = new javax.swing.JLabel();
        buy_btn = new javax.swing.JButton();
        viewcart_btn = new javax.swing.JButton();
        grandtotal_txt = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Bill_Table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grocery");

        Product_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Product"));

        Product_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price", "Stock"
            }
        ));
        Product_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Product_TableMouseClicked(evt);
            }
        });
        Table_ScrollPane.setViewportView(Product_Table);

        javax.swing.GroupLayout Product_PanelLayout = new javax.swing.GroupLayout(Product_Panel);
        Product_Panel.setLayout(Product_PanelLayout);
        Product_PanelLayout.setHorizontalGroup(
            Product_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Product_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Table_ScrollPane)
                .addContainerGap())
        );
        Product_PanelLayout.setVerticalGroup(
            Product_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Product_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Table_ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Menu_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Menu"));

        AddToCart_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Add to Cart"));

        productName_lbl.setText("Product Name");

        prodname_txt.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        prodname_txt.setEnabled(false);

        quantity_lbl.setText("Enter Quantity");

        addtocart_btn.setBackground(new java.awt.Color(0, 102, 0));
        addtocart_btn.setForeground(new java.awt.Color(255, 255, 255));
        addtocart_btn.setText("Add to Cart");
        addtocart_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtocart_btnActionPerformed(evt);
            }
        });

        totalitems_lbl.setText("Total Items in your cart");

        totalitems_txt.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        totalitems_txt.setEnabled(false);

        javax.swing.GroupLayout AddToCart_PanelLayout = new javax.swing.GroupLayout(AddToCart_Panel);
        AddToCart_Panel.setLayout(AddToCart_PanelLayout);
        AddToCart_PanelLayout.setHorizontalGroup(
            AddToCart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddToCart_PanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(AddToCart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(totalitems_lbl)
                    .addComponent(quantity_lbl)
                    .addGroup(AddToCart_PanelLayout.createSequentialGroup()
                        .addComponent(prodid_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(productName_lbl)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddToCart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addtocart_btn)
                    .addGroup(AddToCart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(totalitems_txt)
                        .addComponent(quantity_txt, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        .addComponent(prodname_txt)))
                .addGap(102, 102, 102))
        );
        AddToCart_PanelLayout.setVerticalGroup(
            AddToCart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddToCart_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AddToCart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productName_lbl)
                    .addComponent(prodname_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prodid_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddToCart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantity_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantity_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddToCart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalitems_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalitems_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addtocart_btn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        prodid_txt.setVisible(false);

        Update_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Update Stock"));

        product_name_lbl.setText("Product Name");

        product_name_txt.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        product_name_txt.setEnabled(false);

        new_stock_lbl.setText("New Stock");

        update_stock_btn.setBackground(new java.awt.Color(0, 51, 102));
        update_stock_btn.setForeground(new java.awt.Color(255, 255, 255));
        update_stock_btn.setText("Update");
        update_stock_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_stock_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Update_PanelLayout = new javax.swing.GroupLayout(Update_Panel);
        Update_Panel.setLayout(Update_PanelLayout);
        Update_PanelLayout.setHorizontalGroup(
            Update_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Update_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Update_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(product_name_txt)
                    .addComponent(new_stock_txt)
                    .addGroup(Update_PanelLayout.createSequentialGroup()
                        .addGroup(Update_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(product_name_lbl)
                            .addComponent(new_stock_lbl)
                            .addGroup(Update_PanelLayout.createSequentialGroup()
                                .addComponent(update_stock_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(product_id_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        Update_PanelLayout.setVerticalGroup(
            Update_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Update_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(product_name_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(product_name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(new_stock_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(new_stock_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Update_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(update_stock_btn)
                    .addComponent(product_id_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        product_id_txt.setVisible(false);

        javax.swing.GroupLayout Menu_PanelLayout = new javax.swing.GroupLayout(Menu_Panel);
        Menu_Panel.setLayout(Menu_PanelLayout);
        Menu_PanelLayout.setHorizontalGroup(
            Menu_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Menu_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AddToCart_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Update_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        Menu_PanelLayout.setVerticalGroup(
            Menu_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AddToCart_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Update_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        Cart_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Cart"));

        Cart_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price", "Quantity", "Total"
            }
        ));
        jScrollPane1.setViewportView(Cart_Table);

        grandtotal_lbl.setText("Grand Total");

        buy_btn.setBackground(new java.awt.Color(0, 102, 0));
        buy_btn.setForeground(new java.awt.Color(255, 255, 255));
        buy_btn.setText("Buy");
        buy_btn.setEnabled(false);
        buy_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buy_btnActionPerformed(evt);
            }
        });

        viewcart_btn.setBackground(new java.awt.Color(0, 102, 0));
        viewcart_btn.setForeground(new java.awt.Color(255, 255, 255));
        viewcart_btn.setText("Click to View your Cart");
        viewcart_btn.setEnabled(false);
        viewcart_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewcart_btnActionPerformed(evt);
            }
        });

        grandtotal_txt.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        grandtotal_txt.setEnabled(false);

        javax.swing.GroupLayout Cart_PanelLayout = new javax.swing.GroupLayout(Cart_Panel);
        Cart_Panel.setLayout(Cart_PanelLayout);
        Cart_PanelLayout.setHorizontalGroup(
            Cart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Cart_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Cart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(viewcart_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Cart_PanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(Cart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buy_btn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Cart_PanelLayout.createSequentialGroup()
                                .addComponent(grandtotal_lbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(grandtotal_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        Cart_PanelLayout.setVerticalGroup(
            Cart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Cart_PanelLayout.createSequentialGroup()
                .addComponent(viewcart_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Cart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grandtotal_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grandtotal_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buy_btn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("History"));

        Bill_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bill ID", "Date", "Grand Total"
            }
        ));
        Bill_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Bill_TableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Bill_Table);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Product_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Menu_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Cart_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Cart_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Product_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Menu_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /*
    ------------------------------start-----------------------------------------
    get all the products from database
    productList() fetch all the data from database
    */    
    public ArrayList<Product> productList(){
        ArrayList<Product> productList = new ArrayList<>();
        
        String SQL = "select * from get_products()";
        try(Connection conn = dbConnection.connect();
                Statement st = conn.createStatement()){
            ResultSet rs = st.executeQuery(SQL);
            Product product;
            while(rs.next()){
                product = new Product(rs.getInt("prod_id_table"), 
                        rs.getString("prod_name_table"), 
                        rs.getFloat("prod_price_table"), 
                        rs.getInt("prod_stock_table"));                
                productList.add(product);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
        }
        return productList;             
    }
      
    /*
    show_product() maps all the fetch data into table
    */
    public void show_product(){
        ArrayList<Product> list = productList();
        DefaultTableModel model;       
        model = (DefaultTableModel)Product_Table.getModel();
        Object[] row = new Object[4];          
        list.stream().map((list1) -> {
            row[0] = list1.getProdId();            
            return list1;
        }).map((list1) -> {
            row[1] = list1.getProdName();
            return list1;
        }).map((list1) -> {
            row[2] = list1.getProdPrice();
            return list1;
        }).map((list1) -> {
            row[3] = list1.getProdStock();
            return list1;
        }).forEach((_item) -> {                        
            model.addRow(row);
        });
    }
    /*    
    -------------------------------end------------------------------------------
    */
            
    
    /*
    ------------------------------start-----------------------------------------
    add products into the cart
    action for add to cart button
    */
    private void addtocart_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtocart_btnActionPerformed
        // TODO add your handling code here:
        int prodId,quan;        
        if(prodid_txt.getText().equals("") || prodname_txt.getText().equals("")){
            JOptionPane.showMessageDialog(null, "You have not chosen any product!", "Alert", JOptionPane.WARNING_MESSAGE);
        }else if(quantity_txt.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please enter quantity", "Alert", JOptionPane.WARNING_MESSAGE);
        }else{
            prodId = Integer.parseInt(prodid_txt.getText());            
            quan = Integer.parseInt(quantity_txt.getText());        
            addItem(prodId, quan);
            totalitems_txt.setText(Integer.toString(getItemSize()));
            prodid_txt.setText(null);
            prodname_txt.setText(null);
            quantity_txt.setText(null);  
            viewcart_btn.setEnabled(true);
        }        
    }//GEN-LAST:event_addtocart_btnActionPerformed
    
    /*
    store product id and quantity
    */
    public void addItem(int productId, int quantity){        
        if(!cartItems.containsKey(productId)){
            cartItems.put(productId, quantity);
        }else{
            cartItems.put(productId, cartItems.get(productId)+quantity);
        }    
        itemCount+=quantity;
    }
    
    /*
    returns cart items
    */
    public Map<Integer, Integer> getCartItems(){
        return cartItems;
    }
    
    /*
    returns quantity
    */
    public int getQuantity(int productId){
        return cartItems.get(productId);
    }
    
    /*
    returns total items in cart
    */
    public int getItemSize(){
        return itemCount;
    }
    
    /*
    clears all the cart items
    */
    public void clearHashmap(){
        itemCount=0;
        cartItems.clear();
    }    
    /*    
    -------------------------------end------------------------------------------
    */
    
    /*
    ------------------------------start-----------------------------------------
    maps the row data into textfield 
    */
    private void Product_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Product_TableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)Product_Table.getModel();
        int selectedRowIndex = Product_Table.getSelectedRow();
        prodid_txt.setText(model.getValueAt(selectedRowIndex, 0).toString());
        prodname_txt.setText(model.getValueAt(selectedRowIndex, 1).toString());
        product_id_txt.setText(model.getValueAt(selectedRowIndex, 0).toString());
        product_name_txt.setText(model.getValueAt(selectedRowIndex, 1).toString());
    }//GEN-LAST:event_Product_TableMouseClicked
    /*
    -------------------------------end------------------------------------------
    */
    
    /*
    ------------------------------start-----------------------------------------
    shows the cart list
    */
    private void viewcart_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewcart_btnActionPerformed
        show_cart();   
        viewcart_btn.setEnabled(false);
        addtocart_btn.setEnabled(false);
        buy_btn.setEnabled(true);
    }//GEN-LAST:event_viewcart_btnActionPerformed

    /*
    return product by id
    */
    public Product get_product_by_id(int p_productid) throws SQLException{        
        Product product = new Product();
        String SQL = "select * from get_products_by_id(?)";
        try(Connection conn = dbConnection.connect();
                PreparedStatement pstmt = conn.prepareStatement(SQL)) {
                pstmt.setInt(1, p_productid);
                ResultSet rs = pstmt.executeQuery();                
                while(rs.next()){
                product = new Product(rs.getInt("prodid_table"), 
                        rs.getString("prodname_table"), 
                        rs.getFloat("prodprice_table"),
                        rs.getInt("prodstock_table"));                 
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
        }      
        return product;
    }    

    /*
    insert all the cart list into arraylist
    */   
    public ArrayList<CartList> getCartList(){                             
        getCartItems().keySet().stream().forEach((productid) -> {
            try {
                Product product = get_product_by_id(productid);
                CartList cart = new CartList();
                int quantity = getQuantity(productid);
                
                cart.setProdId(product.getProdId());
                cart.setProdName(product.getProdName());
                cart.setProdPrice(product.getProdPrice());
                cart.setQuantity(quantity);
                cart.setTotal(product.getProdPrice()*quantity);                                  
                cart.setGrantTotal(grandTotal+=cart.getTotal());
                grandTotal = cart.getGrantTotal();
                cartList.add(cart);
            } catch (SQLException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }); 
        grandtotal_txt.setText(Float.toString(grandTotal));
        return cartList;
    }
    
    /*
    show cart list in table
    */
    public void show_cart(){
        ArrayList<CartList> list = getCartList();   
        DefaultTableModel cartModel;    
        cartModel = (DefaultTableModel)Cart_Table.getModel();
        Object[] row = new Object[5];
        list.stream().map((list1) -> {
            row[0] = list1.getProdId();
            return list1;
        }).map((list1) -> {
            row[1] = list1.getProdName();
            return list1;
        }).map((list1) -> {
            row[2] = list1.getProdPrice();
            return list1;
        }).map((list1) -> {
            row[3] = list1.getQuantity();
            return list1;
        }).map((list1) -> {
            row[4] = list1.getTotal();
            return list1;
        }).forEach((_item) -> {
            cartModel.addRow(row);
        });        
    }
    /*
    -------------------------------end------------------------------------------
    */
    
    /*
    ------------------------------start-----------------------------------------
    action for buy button
    insert data into bill table
    */
    private void buy_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buy_btnActionPerformed
        // TODO add your handling code here:
        int response = JOptionPane.showConfirmDialog(null, "Do you want to continue?", "Confirm",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(response == JOptionPane.YES_OPTION){                    
            long prodId = 0;
            String SQL = "insert into bill(billdate,grandtotal)"
                    + "values(now(),?)";

            try (Connection conn = dbConnection.connect();
                PreparedStatement pstmt = conn.prepareStatement(SQL,
                        Statement.RETURN_GENERATED_KEYS)) {
                pstmt.setFloat(1, grandTotal);
                int affectedRows = pstmt.executeUpdate();
                // check the affected rows 
                if (affectedRows > 0) {
                    try (ResultSet rs = pstmt.getGeneratedKeys()) {
                        if (rs.next()) {
                            prodId = rs.getLong(1);
                            insertBillDetails((int) prodId);
                        }
                    } catch (SQLException ex) {
                        System.out.println(ex.getMessage());
                    }               
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());            
            }         
            clearHashmap();   
            dispose();
            new Main().setVisible(true);                                                       
        }
    }//GEN-LAST:event_buy_btnActionPerformed
        
    /*
    insert cart items
    */
    public void insertBillDetails(int billid){        
        cartList.stream().forEach((cartList1) -> {
            String json = "{ \"products\": { \"id\": "+cartList1.getProdId()+" , \"name\": \""+cartList1.getProdName()+"\", \"price\": "+cartList1.getProdPrice()+" , \"quantity\": "+cartList1.getQuantity()+" , \"total\": "+cartList1.getTotal()+" } }";
            String SQL = "insert into billdetails values (?,?::JSON)";
            try (Connection conn = dbConnection.connect();
                PreparedStatement pstmt = conn.prepareStatement(SQL)) {
                    pstmt.setInt(1, billid);
                    pstmt.setObject(2, json);
                    pstmt.executeUpdate();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());            
            }
            
            try (Connection conn = dbConnection.connect();
                CallableStatement properCase  = conn.prepareCall("{call update_stock(?,?)}")) {
                    properCase.setInt(1, cartList1.getProdId());
                    properCase.setInt(2, cartList1.getQuantity());
                    properCase.execute();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());            
            }                        
            
        });
    }
    /*
    -------------------------------end------------------------------------------
    */

    /*
    ------------------------------start-----------------------------------------
    add stock
    */
    private void update_stock_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_stock_btnActionPerformed
        // TODO add your handling code here:
        int prodId,quan;        
        if(product_id_txt.getText().equals("")){
            JOptionPane.showMessageDialog(null, "You have not chosen any product!", "Alert", JOptionPane.WARNING_MESSAGE);
        }else if(new_stock_txt.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please enter quantity", "Alert", JOptionPane.WARNING_MESSAGE);
        }else{
            prodId = Integer.parseInt(product_id_txt.getText());            
            quan = Integer.parseInt(new_stock_txt.getText());              
            try (Connection conn = dbConnection.connect();
                CallableStatement properCase  = conn.prepareCall("{call add_stock(?,?)}")) {
                    properCase.setInt(1, prodId);
                    properCase.setInt(2, quan);
                    properCase.execute();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());            
            }                        
            dispose();
            new Main().setVisible(true);                                                       

        }                
    }//GEN-LAST:event_update_stock_btnActionPerformed
    /*
    -------------------------------end------------------------------------------
    */

    /*
    ------------------------------start-----------------------------------------
    opens a new frame that shows the product list bought
    */
    private void Bill_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Bill_TableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)Bill_Table.getModel();
        int selectedRowIndex = Bill_Table.getSelectedRow();
        int billid = (int) model.getValueAt(selectedRowIndex, 0);
        BillDetails billDetails = new BillDetails();        
        billDetails.setVisible(true);
        billDetails.setLocationRelativeTo(null);
        billDetails.show_bill_details(billid);        
    }//GEN-LAST:event_Bill_TableMouseClicked
    /*
    -------------------------------end------------------------------------------
    */        

    /*
    ------------------------------start-----------------------------------------
    shows cart history
    cart() gets all the value from database
    */
    public ArrayList<CartList> cart(){
        ArrayList<CartList> cart = new ArrayList<>();
        
        String SQL = "select * from get_bill()";
        try(Connection conn = dbConnection.connect();
                Statement st = conn.createStatement()){
            ResultSet rs = st.executeQuery(SQL);
            CartList cl;
            while(rs.next()){
                cl = new CartList(rs.getFloat("grandtotal_table"), 
                        rs.getInt("billid_table"), 
                        rs.getTimestamp("billdate_table").toString());                
                cart.add(cl);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,e);
        }
        return cart;             
    }

    /*
    map cart data into table
    */
    public void show_bill(){
        ArrayList<CartList> list = cart();
        DefaultTableModel model;       
        model = (DefaultTableModel)Bill_Table.getModel();
        Object[] row = new Object[3];          
        list.stream().map((list1) -> {
            row[0] = list1.getBillid();            
            return list1;
        }).map((list1) -> {
            row[1] = list1.getBilldate();
            return list1;
        }).map((list1) -> {
            row[2] = list1.getGrantTotal();
            return list1;
        }).forEach((_item) -> {                        
            model.addRow(row);
        });
    }
    /*
    -------------------------------end------------------------------------------
    */     
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
                              
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {               
            new Main().setVisible(true);
            
        });                    
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddToCart_Panel;
    private javax.swing.JTable Bill_Table;
    private javax.swing.JPanel Cart_Panel;
    private javax.swing.JTable Cart_Table;
    private javax.swing.JPanel Menu_Panel;
    private javax.swing.JPanel Product_Panel;
    private javax.swing.JTable Product_Table;
    private javax.swing.JScrollPane Table_ScrollPane;
    private javax.swing.JPanel Update_Panel;
    private javax.swing.JButton addtocart_btn;
    private javax.swing.JButton buy_btn;
    private javax.swing.JLabel grandtotal_lbl;
    private javax.swing.JTextField grandtotal_txt;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel new_stock_lbl;
    private javax.swing.JTextField new_stock_txt;
    private javax.swing.JTextField prodid_txt;
    private javax.swing.JTextField prodname_txt;
    private javax.swing.JLabel productName_lbl;
    private javax.swing.JTextField product_id_txt;
    private javax.swing.JLabel product_name_lbl;
    private javax.swing.JTextField product_name_txt;
    private javax.swing.JLabel quantity_lbl;
    private javax.swing.JTextField quantity_txt;
    private javax.swing.JLabel totalitems_lbl;
    private javax.swing.JTextField totalitems_txt;
    private javax.swing.JButton update_stock_btn;
    private javax.swing.JButton viewcart_btn;
    // End of variables declaration//GEN-END:variables
    
    

    
    
    
}
